import os
import re
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from telegram import Bot
from dotenv import load_dotenv

load_dotenv()

# ====== C·∫§U H√åNH ======
TOKEN = os.getenv("TELEGRAM_TOKEN_SAVING")
CHAT_SAVING_ID = "7965457812"
FILE_NAME = "savings_log.txt"
CHART_IMG = "savings_chart.png"
MARKER_IMG = "savings_marker_chart.png"

# ====== X·ª¨ L√ù D·ªÆ LI·ªÜU ======
def load_savings_log():
    data = []
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, "r", encoding="utf-8") as f:
            for line in f:
                match = re.search(r"Ng√†y (\d+): (\d+) ngh√¨n ƒë·ªìng", line)
                if match:
                    day = int(match.group(1))
                    amount = int(match.group(2))
                    data.append((day, amount))
    return data

def calculate_total(data):
    return sum(amount for _, amount in data)

# ====== BI·ªÇU ƒê·ªí S·ªê TI·ªÄN ======
def draw_amount_chart(data):
    if not data:
        return
    days = [d for d, _ in data]
    amounts = [a for _, a in data]

    plt.figure(figsize=(10, 5))
    plt.bar(days, amounts, color="#4CAF50")
    plt.title("Bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô ti·∫øt ki·ªám 365 ng√†y")
    plt.xlabel("Ng√†y")
    plt.ylabel("S·ªë ti·ªÅn (ngh√¨n ƒë·ªìng)")
    plt.tight_layout()
    plt.savefig(CHART_IMG)
    plt.close()

# ====== BI·ªÇU ƒê·ªí ƒê√ÅNH D·∫§U 365 NG√ÄY ======
def draw_savings_grid(saved_days):
    total_days = 365
    cols = 31  # d·ªÖ chia h∆°n cho layout ƒë·∫πp
    rows = (total_days // cols) + 1

    fig, ax = plt.subplots(figsize=(20, 12))
    ax.set_xlim(0, cols)
    ax.set_ylim(0, rows)

    for i in range(1, total_days + 1):
        col = (i - 1) % cols
        row = rows - 1 - (i - 1) // cols

        # M√†u s·∫Øc
        if any(i == days[1] for days in saved_days):
            color = "#4CAF50"  # xanh l√°
            text_color = "white"
        else:
            color = "#E0E0E0"  # x√°m nh·∫°t
            text_color = "black"

        # V·∫Ω √¥
        rect = plt.Rectangle((col, row), 1, 1, facecolor=color, edgecolor='black', linewidth=0.5)
        ax.add_patch(rect)
        ax.text(col + 0.5, row + 0.5, str(i), ha='center', va='center', fontsize=8, color=text_color, fontweight='bold')

    # G·ª° tr·ª•c
    ax.set_xticks([])
    ax.set_yticks([])

    # Th√™m ti√™u ƒë·ªÅ
    ax.set_title("C√°c s·ªë ƒë√£ ti·∫øt ki·ªám 365 ng√†y", fontsize=24, fontweight='bold', pad=20)

    # Th√™m ch√∫ th√≠ch (legend)
    saved_patch = mpatches.Patch(color="#4CAF50", label="ƒê√£ ti·∫øt ki·ªám")
    unsaved_patch = mpatches.Patch(color="#E0E0E0", label="Ch∆∞a ti·∫øt ki·ªám")
    ax.legend(handles=[saved_patch, unsaved_patch], loc="lower center", bbox_to_anchor=(0.5, -0.05), ncol=2, fontsize=12)

    plt.tight_layout()
    plt.savefig(MARKER_IMG, dpi=300)
    plt.close()

# ====== G·ª¨I QUA TELEGRAM ======
def send_report(data):
    bot = Bot(token=TOKEN)
    total = calculate_total(data)

    message = f"üí∞ B√°o c√°o ti·∫øt ki·ªám 365 ng√†y\n\n"
    message += f"T·ªïng ƒë√£ ti·∫øt ki·ªám: {total} ngh√¨n ƒë·ªìng\n"
    message += f"S·ªë ng√†y ƒë√£ ho√†n th√†nh: {len(data)}/365\n"

    bot.send_message(chat_id=CHAT_SAVING_ID, text=message)

    # G·ª≠i bi·ªÉu ƒë·ªì s·ªë ti·ªÅn
    if os.path.exists(CHART_IMG):
        with open(CHART_IMG, "rb") as img:
            bot.send_photo(chat_id=CHAT_SAVING_ID, photo=img)

    # G·ª≠i bi·ªÉu ƒë·ªì ƒë√°nh d·∫•u 365 ng√†y
    if os.path.exists(MARKER_IMG):
        with open(MARKER_IMG, "rb") as img:
            bot.send_photo(chat_id=CHAT_SAVING_ID, photo=img)

    # G·ª≠i l·ªãch s·ª≠ g·∫ßn ƒë√¢y
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, "r", encoding="utf-8") as f:
            log = f.readlines()
            log_recent = "".join(log[-10:])
            bot.send_message(chat_id=CHAT_SAVING_ID, text=f"üìú L·ªãch s·ª≠ g·∫ßn ƒë√¢y:\n\n{log_recent}")

# ====== MAIN ======
if __name__ == "__main__":
    savings_data = load_savings_log()
    draw_amount_chart(savings_data)
    draw_savings_grid(savings_data)
    send_report(savings_data)
